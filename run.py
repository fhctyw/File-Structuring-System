import subprocess
import threading
import signal
import sys
import argparse
import os
import shutil

processes = []

# ANSI –∫–æ–ª—å–æ—Ä–∏
COLORS = {
    "Backend": "\033[94m",   # —Å–∏–Ω—ñ–π
    "Frontend": "\033[92m",  # –∑–µ–ª–µ–Ω–∏–π
    "SYSTEM": "\033[93m",    # –∂–æ–≤—Ç–∏–π
    "ERROR": "\033[91m",     # —á–µ—Ä–≤–æ–Ω–∏–π
    "RESET": "\033[0m"
}

def run_command(command, cwd, env=None):
    result = subprocess.run(command, shell=True, cwd=cwd, env=env)
    if result.returncode != 0:
        print(f"{COLORS['ERROR']}‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–∞: {command}{COLORS['RESET']}")
        sys.exit(1)

def check_tool(tool_name):
    result = shutil.which(tool_name)
    if result is None:
        print(f"{COLORS['ERROR']}‚ùå {tool_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –π–æ–≥–æ —Ç–∞ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—ñ–Ω —î –≤ PATH.{COLORS['RESET']}")
        sys.exit(1)
    return result

def setup_backend(backend_dir, production=False):
    venv_path = os.path.join(backend_dir, 'venv')
    if not os.path.exists(venv_path):
        print(f"{COLORS['SYSTEM']}üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞...{COLORS['RESET']}")
        run_command("python -m venv venv", backend_dir)
    else:
        print(f"{COLORS['SYSTEM']}‚úÖ –í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –≤–∂–µ —ñ—Å–Ω—É—î{COLORS['RESET']}")

    if os.name == 'nt':
        python_path = os.path.abspath(os.path.join(venv_path, 'Scripts', 'python.exe'))
    else:
        python_path = os.path.join(venv_path, 'bin', 'python')

    print(f"{COLORS['SYSTEM']}üîπ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –±–µ–∫–µ–Ω–¥—É...{COLORS['RESET']}")
    run_command(f'"{python_path}" -m pip install --upgrade pip', backend_dir)
    run_command(f'"{python_path}" -m pip install -r requirements.txt', backend_dir)

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É –∞–±–æ —Ä–æ–∑—Ä–æ–±–∫–∏
    if production:
        # –î–ª—è Windows –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ workers —É –ø—Ä–æ–¥–∞–∫—à–µ–Ω-—Ä–µ–∂–∏–º—ñ
        if os.name == 'nt':
            # –î–ª—è Windows –±–µ–∑ –≤–æ—Ä–∫–µ—Ä—ñ–≤
            uvicorn_cmd = f'"{python_path}" -m uvicorn app.main:app --host 0.0.0.0 --port 8000'
        else:
            # –î–ª—è Linux/Mac –∑ –≤–æ—Ä–∫–µ—Ä–∞–º–∏
            uvicorn_cmd = f'"{python_path}" -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4'
    else:
        # –†–æ–∑—Ä–æ–±–∫–∞ –∑ –≥–∞—Ä—è—á–∏–º –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
        uvicorn_cmd = f'"{python_path}" -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload'
    
    return uvicorn_cmd

def setup_frontend(frontend_dir, production=False):
    check_tool("node")
    check_tool("npm")

    package_json = os.path.join(frontend_dir, 'package.json')
    if not os.path.isfile(package_json):
        print(f"{COLORS['ERROR']}‚ùå package.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ {frontend_dir}{COLORS['RESET']}")
        sys.exit(1)

    node_modules = os.path.join(frontend_dir, 'node_modules')
    if not os.path.exists(node_modules) or len(os.listdir(node_modules)) == 0:
        print(f"{COLORS['SYSTEM']}üîπ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞–∫–µ—Ç—ñ–≤ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É (npm install)...{COLORS['RESET']}")
        run_command("npm install", frontend_dir)
    else:
        print(f"{COLORS['SYSTEM']}‚úÖ –ü–∞–∫–µ—Ç–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ{COLORS['RESET']}")
    
    # –Ø–∫—â–æ —Ä–µ–∂–∏–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É, –±—É–¥—É—î–º–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    if production:
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ serve, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        print(f"{COLORS['SYSTEM']}üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ serve –¥–ª—è –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è SPA...{COLORS['RESET']}")
        if not os.path.exists(os.path.join(frontend_dir, 'node_modules', '.bin', 'serve')):
            print(f"{COLORS['SYSTEM']}üîπ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è serve –¥–ª—è –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è SPA...{COLORS['RESET']}")
            run_command("npm install serve --save-dev", frontend_dir)
        
        print(f"{COLORS['SYSTEM']}üîπ –ü–æ–±—É–¥–æ–≤–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É...{COLORS['RESET']}")
        run_command("npm run build", frontend_dir)

def run_process(command, name, cwd, env=None):
    print(f"{COLORS['SYSTEM']}üîπ –ó–∞–ø—É—Å–∫ {name}: {command}{COLORS['RESET']}")
    process = subprocess.Popen(
        command,
        shell=True,
        cwd=cwd,
        env=env,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        bufsize=1,
        universal_newlines=True
    )
    processes.append(process)

    try:
        for line in process.stdout:
            colored_line = f"{COLORS[name]}[{name}] {line.rstrip()}{COLORS['RESET']}"
            print(colored_line)
    except Exception as e:
        print(f"{COLORS['ERROR']}‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –≤–∏–≤–æ–¥—É {name}: {e}{COLORS['RESET']}")

    process.wait()
    print(f"{COLORS['ERROR']}‚ùå {name} –∑—É–ø–∏–Ω–µ–Ω–æ{COLORS['RESET']}")

def serve_frontend(frontend_dir):
    # –û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ–±—É–¥–æ–≤–∞–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø—Ä–æ—Å—Ç–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    dist_dir = os.path.join(frontend_dir, 'dist')
    if not os.path.exists(dist_dir):
        print(f"{COLORS['ERROR']}‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑–±—ñ—Ä–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {dist_dir}{COLORS['RESET']}")
        sys.exit(1)
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ http.server –∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ Python –¥–ª—è –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    return f"python -m http.server 3000 --directory {dist_dir}"

def stop_all():
    print(f"\n{COLORS['SYSTEM']}üõë –ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤...{COLORS['RESET']}")
    for proc in processes:
        proc.terminate()
    sys.exit(0)

def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –±–µ–∫–µ–Ω–¥—É (FastAPI) —Ç–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É (Vite) —Ä–∞–∑–æ–º –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é")
    parser.add_argument("-c", "--config", help="–®–ª—è—Ö –¥–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è", default=None)
    parser.add_argument("-p", "--production", action="store_true", help="–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º—ñ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")

    args = parser.parse_args()

    backend_dir = "./backend"
    frontend_dir = "./frontend"
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É
    mode = "–ü–†–û–î–ê–ö–®–ï–ù" if args.production else "–†–û–ó–†–û–ë–ö–ê"
    print(f"{COLORS['SYSTEM']}üöÄ –ó–∞–ø—É—Å–∫ —É —Ä–µ–∂–∏–º—ñ {mode}{COLORS['RESET']}")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É (—è–∫—â–æ –≤—ñ–Ω –±—É–≤ –≤–∫–∞–∑–∞–Ω–∏–π)
    if args.config and not os.path.isfile(args.config):
        print(f"{COLORS['ERROR']}‚ùå –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {args.config}{COLORS['RESET']}")
        sys.exit(1)

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –±–µ–∫–µ–Ω–¥—É
    uvicorn_cmd = setup_backend(backend_dir, args.production)

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
    setup_frontend(frontend_dir, args.production)

    # –ü–µ—Ä–µ–¥–∞—á–∞ —à–ª—è—Ö—É –¥–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —è–∫ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (—è–∫—â–æ —Ñ–∞–π–ª –≤–∫–∞–∑–∞–Ω–æ)
    backend_env = os.environ.copy()
    if args.config:
        backend_env["STRUCTURE_CONFIG_PATH"] = os.path.abspath(args.config)
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∞–ø–æ—Ä—Ü—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É –¥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    if args.production:
        backend_env["ENVIRONMENT"] = "production"
    else:
        backend_env["ENVIRONMENT"] = "development"

    # –û–±—Ä–æ–±–∫–∞ Ctrl+C
    signal.signal(signal.SIGINT, lambda sig, frame: stop_all())

    # –ó–∞–ø—É—Å–∫ –±–µ–∫–µ–Ω–¥—É (FastAPI)
    backend_thread = threading.Thread(
        target=run_process,
        args=(uvicorn_cmd, "Backend", backend_dir, backend_env)
    )
    backend_thread.start()

    # –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É - –∞–±–æ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–æ–∑—Ä–æ–±–∫–∏, –∞–±–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    if args.production:
        frontend_cmd = serve_frontend(frontend_dir)
    else:
        frontend_cmd = "npm run dev"
        
    frontend_thread = threading.Thread(
        target=run_process,
        args=(frontend_cmd, "Frontend", frontend_dir)
    )
    frontend_thread.start()

    # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±–æ—Ö
    backend_thread.join()
    frontend_thread.join()

if __name__ == "__main__":
    main()